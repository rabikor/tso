// Code generated by MockGen. DO NOT EDIT.
// Source: database/schemes.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"
	database "treatment-scheme-organizer/database"

	gomock "github.com/golang/mock/gomock"
)

// MockSchemesRepository is a mock of SchemesRepository interface.
type MockSchemesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSchemesRepositoryMockRecorder
}

// MockSchemesRepositoryMockRecorder is the mock recorder for MockSchemesRepository.
type MockSchemesRepositoryMockRecorder struct {
	mock *MockSchemesRepository
}

// NewMockSchemesRepository creates a new mock instance.
func NewMockSchemesRepository(ctrl *gomock.Controller) *MockSchemesRepository {
	mock := &MockSchemesRepository{ctrl: ctrl}
	mock.recorder = &MockSchemesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchemesRepository) EXPECT() *MockSchemesRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockSchemesRepository) Add(illnessID, length uint, days []database.SchemeDay) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", illnessID, length, days)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockSchemesRepositoryMockRecorder) Add(illnessID, length, days interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSchemesRepository)(nil).Add), illnessID, length, days)
}

// ByID mocks base method.
func (m *MockSchemesRepository) ByID(id uint) (database.Scheme, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByID", id)
	ret0, _ := ret[0].(database.Scheme)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByID indicates an expected call of ByID.
func (mr *MockSchemesRepositoryMockRecorder) ByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByID", reflect.TypeOf((*MockSchemesRepository)(nil).ByID), id)
}

// ByIllness mocks base method.
func (m *MockSchemesRepository) ByIllness(illnessID, limit, offset int) ([]database.Scheme, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByIllness", illnessID, limit, offset)
	ret0, _ := ret[0].([]database.Scheme)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByIllness indicates an expected call of ByIllness.
func (mr *MockSchemesRepositoryMockRecorder) ByIllness(illnessID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByIllness", reflect.TypeOf((*MockSchemesRepository)(nil).ByIllness), illnessID, limit, offset)
}
