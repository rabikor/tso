// Code generated by MockGen. DO NOT EDIT.
// Source: database/drugs.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"
	database "treatment-scheme-organizer/database"

	gomock "github.com/golang/mock/gomock"
)

// MockDrugsRepository is a mock of DrugsRepository interface.
type MockDrugsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDrugsRepositoryMockRecorder
}

// MockDrugsRepositoryMockRecorder is the mock recorder for MockDrugsRepository.
type MockDrugsRepositoryMockRecorder struct {
	mock *MockDrugsRepository
}

// NewMockDrugsRepository creates a new mock instance.
func NewMockDrugsRepository(ctrl *gomock.Controller) *MockDrugsRepository {
	mock := &MockDrugsRepository{ctrl: ctrl}
	mock.recorder = &MockDrugsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDrugsRepository) EXPECT() *MockDrugsRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockDrugsRepository) Add(title string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", title)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockDrugsRepositoryMockRecorder) Add(title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockDrugsRepository)(nil).Add), title)
}

// All mocks base method.
func (m *MockDrugsRepository) All(limit, offset int) ([]database.Drug, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", limit, offset)
	ret0, _ := ret[0].([]database.Drug)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockDrugsRepositoryMockRecorder) All(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockDrugsRepository)(nil).All), limit, offset)
}

// ByID mocks base method.
func (m *MockDrugsRepository) ByID(id uint) (database.Drug, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByID", id)
	ret0, _ := ret[0].(database.Drug)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByID indicates an expected call of ByID.
func (mr *MockDrugsRepositoryMockRecorder) ByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByID", reflect.TypeOf((*MockDrugsRepository)(nil).ByID), id)
}
