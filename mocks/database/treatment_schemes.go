// Code generated by MockGen. DO NOT EDIT.
// Source: database/treatment_schemes.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"
	database "treatment-scheme-organizer/database"

	gomock "github.com/golang/mock/gomock"
)

// MockTreatmentSchemesRepository is a mock of TreatmentSchemesRepository interface.
type MockTreatmentSchemesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTreatmentSchemesRepositoryMockRecorder
}

// MockTreatmentSchemesRepositoryMockRecorder is the mock recorder for MockTreatmentSchemesRepository.
type MockTreatmentSchemesRepositoryMockRecorder struct {
	mock *MockTreatmentSchemesRepository
}

// NewMockTreatmentSchemesRepository creates a new mock instance.
func NewMockTreatmentSchemesRepository(ctrl *gomock.Controller) *MockTreatmentSchemesRepository {
	mock := &MockTreatmentSchemesRepository{ctrl: ctrl}
	mock.recorder = &MockTreatmentSchemesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTreatmentSchemesRepository) EXPECT() *MockTreatmentSchemesRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTreatmentSchemesRepository) Add(treatmentID, schemeID, beginFromDay, order uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", treatmentID, schemeID, beginFromDay, order)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockTreatmentSchemesRepositoryMockRecorder) Add(treatmentID, schemeID, beginFromDay, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTreatmentSchemesRepository)(nil).Add), treatmentID, schemeID, beginFromDay, order)
}

// ByTreatment mocks base method.
func (m *MockTreatmentSchemesRepository) ByTreatment(treatmentID uint, limit, offset int) ([]database.TreatmentScheme, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByTreatment", treatmentID, limit, offset)
	ret0, _ := ret[0].([]database.TreatmentScheme)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByTreatment indicates an expected call of ByTreatment.
func (mr *MockTreatmentSchemesRepositoryMockRecorder) ByTreatment(treatmentID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByTreatment", reflect.TypeOf((*MockTreatmentSchemesRepository)(nil).ByTreatment), treatmentID, limit, offset)
}

// CountByTreatment mocks base method.
func (m *MockTreatmentSchemesRepository) CountByTreatment(treatmentID uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByTreatment", treatmentID)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByTreatment indicates an expected call of CountByTreatment.
func (mr *MockTreatmentSchemesRepositoryMockRecorder) CountByTreatment(treatmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByTreatment", reflect.TypeOf((*MockTreatmentSchemesRepository)(nil).CountByTreatment), treatmentID)
}
